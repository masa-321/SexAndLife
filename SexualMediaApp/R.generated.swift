//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 25 images.
  struct image {
    /// Image `Heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "Heart")
    /// Image `InfoInquiry`.
    static let infoInquiry = Rswift.ImageResource(bundle: R.hostingBundle, name: "InfoInquiry")
    /// Image `LaunchImage2`.
    static let launchImage2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage2")
    /// Image `LaunchImageSet`.
    static let launchImageSet = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImageSet")
    /// Image `NextPage`.
    static let nextPage = Rswift.ImageResource(bundle: R.hostingBundle, name: "NextPage")
    /// Image `clip`.
    static let clip = Rswift.ImageResource(bundle: R.hostingBundle, name: "clip")
    /// Image `defaultImage`.
    static let defaultImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "defaultImage")
    /// Image `document`.
    static let document = Rswift.ImageResource(bundle: R.hostingBundle, name: "document")
    /// Image `facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook")
    /// Image `info`.
    static let info = Rswift.ImageResource(bundle: R.hostingBundle, name: "info")
    /// Image `left`.
    static let left = Rswift.ImageResource(bundle: R.hostingBundle, name: "left")
    /// Image `licence`.
    static let licence = Rswift.ImageResource(bundle: R.hostingBundle, name: "licence")
    /// Image `mail`.
    static let mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "mail")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `notification`.
    static let notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification")
    /// Image `placeholderImage`.
    static let placeholderImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholderImage")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `profile2`.
    static let profile2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile2")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `review`.
    static let review = Rswift.ImageResource(bundle: R.hostingBundle, name: "review")
    /// Image `right`.
    static let right = Rswift.ImageResource(bundle: R.hostingBundle, name: "right")
    /// Image `safari5`.
    static let safari5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "safari5")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `searchbar`.
    static let searchbar = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchbar")
    /// Image `socialLink`.
    static let socialLink = Rswift.ImageResource(bundle: R.hostingBundle, name: "socialLink")
    
    /// `UIImage(named: "Heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "InfoInquiry", bundle: ..., traitCollection: ...)`
    static func infoInquiry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.infoInquiry, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LaunchImage2", bundle: ..., traitCollection: ...)`
    static func launchImage2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LaunchImageSet", bundle: ..., traitCollection: ...)`
    static func launchImageSet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImageSet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NextPage", bundle: ..., traitCollection: ...)`
    static func nextPage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nextPage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "clip", bundle: ..., traitCollection: ...)`
    static func clip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clip, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "defaultImage", bundle: ..., traitCollection: ...)`
    static func defaultImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defaultImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "document", bundle: ..., traitCollection: ...)`
    static func document(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.document, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "info", bundle: ..., traitCollection: ...)`
    static func info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "left", bundle: ..., traitCollection: ...)`
    static func left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "licence", bundle: ..., traitCollection: ...)`
    static func licence(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.licence, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mail", bundle: ..., traitCollection: ...)`
    static func mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mail, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "notification", bundle: ..., traitCollection: ...)`
    static func notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholderImage", bundle: ..., traitCollection: ...)`
    static func placeholderImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholderImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile2", bundle: ..., traitCollection: ...)`
    static func profile2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "review", bundle: ..., traitCollection: ...)`
    static func review(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.review, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "right", bundle: ..., traitCollection: ...)`
    static func right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "safari5", bundle: ..., traitCollection: ...)`
    static func safari5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.safari5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "searchbar", bundle: ..., traitCollection: ...)`
    static func searchbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchbar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "socialLink", bundle: ..., traitCollection: ...)`
    static func socialLink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.socialLink, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    /// Nib `ChannelCell`.
    static let channelCell = _R.nib._ChannelCell()
    /// Nib `CommentTableViewCell`.
    static let commentTableViewCell = _R.nib._CommentTableViewCell()
    /// Nib `InfoCell`.
    static let infoCell = _R.nib._InfoCell()
    /// Nib `InitialTableViewCell`.
    static let initialTableViewCell = _R.nib._InitialTableViewCell()
    /// Nib `ListCell`.
    static let listCell = _R.nib._ListCell()
    /// Nib `QuestionAnswerCell`.
    static let questionAnswerCell = _R.nib._QuestionAnswerCell()
    /// Nib `SummaryCell`.
    static let summaryCell = _R.nib._SummaryCell()
    
    /// `UINib(name: "ChannelCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.channelCell) instead")
    static func channelCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.channelCell)
    }
    
    /// `UINib(name: "CommentTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commentTableViewCell) instead")
    static func commentTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentTableViewCell)
    }
    
    /// `UINib(name: "InfoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.infoCell) instead")
    static func infoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.infoCell)
    }
    
    /// `UINib(name: "InitialTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.initialTableViewCell) instead")
    static func initialTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.initialTableViewCell)
    }
    
    /// `UINib(name: "ListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.listCell) instead")
    static func listCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.listCell)
    }
    
    /// `UINib(name: "QuestionAnswerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questionAnswerCell) instead")
    static func questionAnswerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionAnswerCell)
    }
    
    /// `UINib(name: "SummaryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.summaryCell) instead")
    static func summaryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.summaryCell)
    }
    
    static func channelCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChannelCell? {
      return R.nib.channelCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChannelCell
    }
    
    static func commentTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentTableViewCell? {
      return R.nib.commentTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentTableViewCell
    }
    
    static func infoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InfoCell? {
      return R.nib.infoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InfoCell
    }
    
    static func initialTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InitialTableViewCell? {
      return R.nib.initialTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InitialTableViewCell
    }
    
    static func listCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ListCell? {
      return R.nib.listCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListCell
    }
    
    static func questionAnswerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionAnswerCell? {
      return R.nib.questionAnswerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionAnswerCell
    }
    
    static func summaryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SummaryCell? {
      return R.nib.summaryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SummaryCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 17 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CommentTableViewCell`.
    static let commentTableViewCell: Rswift.ReuseIdentifier<CommentTableViewCell> = Rswift.ReuseIdentifier(identifier: "CommentTableViewCell")
    /// Reuse identifier `ConsultationCollectionCell`.
    static let consultationCollectionCell: Rswift.ReuseIdentifier<ConsultationCollectionCell> = Rswift.ReuseIdentifier(identifier: "ConsultationCollectionCell")
    /// Reuse identifier `ConsultationItemCell`.
    static let consultationItemCell: Rswift.ReuseIdentifier<ConsultationItemCell> = Rswift.ReuseIdentifier(identifier: "ConsultationItemCell")
    /// Reuse identifier `InfoCell`.
    static let infoCell: Rswift.ReuseIdentifier<InfoCell> = Rswift.ReuseIdentifier(identifier: "InfoCell")
    /// Reuse identifier `InitialTableViewCell`.
    static let initialTableViewCell: Rswift.ReuseIdentifier<InitialTableViewCell> = Rswift.ReuseIdentifier(identifier: "InitialTableViewCell")
    /// Reuse identifier `ListCell`.
    static let listCell: Rswift.ReuseIdentifier<ListCell> = Rswift.ReuseIdentifier(identifier: "ListCell")
    /// Reuse identifier `SocialNetworkCell`.
    static let socialNetworkCell: Rswift.ReuseIdentifier<SocialNetworkCell> = Rswift.ReuseIdentifier(identifier: "SocialNetworkCell")
    /// Reuse identifier `SummaryCell`.
    static let summaryCell: Rswift.ReuseIdentifier<SummaryCell> = Rswift.ReuseIdentifier(identifier: "SummaryCell")
    /// Reuse identifier `ageCell`.
    static let ageCell: Rswift.ReuseIdentifier<ageCell> = Rswift.ReuseIdentifier(identifier: "ageCell")
    /// Reuse identifier `employmentCell`.
    static let employmentCell: Rswift.ReuseIdentifier<employmentCell> = Rswift.ReuseIdentifier(identifier: "employmentCell")
    /// Reuse identifier `imageCell`.
    static let imageCell: Rswift.ReuseIdentifier<imageCell> = Rswift.ReuseIdentifier(identifier: "imageCell")
    /// Reuse identifier `nameCell`.
    static let nameCell: Rswift.ReuseIdentifier<nameCell> = Rswift.ReuseIdentifier(identifier: "nameCell")
    /// Reuse identifier `occupationCell`.
    static let occupationCell: Rswift.ReuseIdentifier<occupationCell> = Rswift.ReuseIdentifier(identifier: "occupationCell")
    /// Reuse identifier `profileCell`.
    static let profileCell: Rswift.ReuseIdentifier<profileCell> = Rswift.ReuseIdentifier(identifier: "profileCell")
    /// Reuse identifier `sexCell`.
    static let sexCell: Rswift.ReuseIdentifier<sexCell> = Rswift.ReuseIdentifier(identifier: "sexCell")
    /// Reuse identifier `sourceImageCell`.
    static let sourceImageCell: Rswift.ReuseIdentifier<SourceImageCell> = Rswift.ReuseIdentifier(identifier: "sourceImageCell")
    /// Reuse identifier `sourceInfoCell`.
    static let sourceInfoCell: Rswift.ReuseIdentifier<SourceInfoCell> = Rswift.ReuseIdentifier(identifier: "sourceInfoCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `ViewController`, and contains static references to 1 segues.
    struct viewController {
      /// Segue identifier `SummaryView`.
      static let summaryView: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ViewController, SummaryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "SummaryView")
      
      /// Optionally returns a typed version of segue `SummaryView`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func summaryView(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ViewController, SummaryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewController.summaryView, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Info`.
    static let info = _R.storyboard.info()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Info", bundle: ...)`
    static func info(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.info)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _InfoCell.validate()
      try _QuestionAnswerCell.validate()
    }
    
    struct _ChannelCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ChannelCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChannelCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChannelCell
      }
      
      fileprivate init() {}
    }
    
    struct _CommentTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CommentTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "CommentTableViewCell"
      let name = "CommentTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _InfoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = InfoCell
      
      let bundle = R.hostingBundle
      let identifier = "InfoCell"
      let name = "InfoCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InfoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InfoCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "NextPage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NextPage' is used in nib 'InfoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholderImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholderImage' is used in nib 'InfoCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _InitialTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = InitialTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "InitialTableViewCell"
      let name = "InitialTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InitialTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InitialTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ListCell
      
      let bundle = R.hostingBundle
      let identifier = "ListCell"
      let name = "ListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListCell
      }
      
      fileprivate init() {}
    }
    
    struct _QuestionAnswerCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuestionAnswerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionAnswerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionAnswerCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "placeholderImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholderImage' is used in nib 'QuestionAnswerCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SummaryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SummaryCell
      
      let bundle = R.hostingBundle
      let identifier = "SummaryCell"
      let name = "SummaryCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SummaryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SummaryCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try info.validate()
      try launchScreen.validate()
      try main.validate()
    }
    
    struct info: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = InfoViewController
      
      let bundle = R.hostingBundle
      let infoViewController = StoryboardViewControllerResource<InfoViewController>(identifier: "InfoViewController")
      let licence = StoryboardViewControllerResource<LicenceViewController>(identifier: "Licence")
      let name = "Info"
      let privacyPolicy = StoryboardViewControllerResource<PrivacyPolicyViewController>(identifier: "PrivacyPolicy")
      let profile = StoryboardViewControllerResource<ProfileViewController>(identifier: "Profile")
      let socialNetwork = StoryboardViewControllerResource<SocialNetworkViewController>(identifier: "SocialNetwork")
      
      func infoViewController(_: Void = ()) -> InfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: infoViewController)
      }
      
      func licence(_: Void = ()) -> LicenceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: licence)
      }
      
      func privacyPolicy(_: Void = ()) -> PrivacyPolicyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: privacyPolicy)
      }
      
      func profile(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profile)
      }
      
      func socialNetwork(_: Void = ()) -> SocialNetworkViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialNetwork)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook' is used in storyboard 'Info', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile2' is used in storyboard 'Info', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.info().infoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'infoViewController' could not be loaded from storyboard 'Info' as 'InfoViewController'.") }
        if _R.storyboard.info().licence() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'licence' could not be loaded from storyboard 'Info' as 'LicenceViewController'.") }
        if _R.storyboard.info().privacyPolicy() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'privacyPolicy' could not be loaded from storyboard 'Info' as 'PrivacyPolicyViewController'.") }
        if _R.storyboard.info().profile() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profile' could not be loaded from storyboard 'Info' as 'ProfileViewController'.") }
        if _R.storyboard.info().socialNetwork() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialNetwork' could not be loaded from storyboard 'Info' as 'SocialNetworkViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "LaunchImageSet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LaunchImageSet' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = InitialNavigationController
      
      let attention = StoryboardViewControllerResource<AttentionViewController>(identifier: "Attention")
      let browseViewController = StoryboardViewControllerResource<BrowseViewController>(identifier: "BrowseViewController")
      let bundle = R.hostingBundle
      let consultationDetail = StoryboardViewControllerResource<ConsultationDetailViewController>(identifier: "ConsultationDetail")
      let initial = StoryboardViewControllerResource<InitialNavigationController>(identifier: "Initial")
      let login = StoryboardViewControllerResource<LoginViewController>(identifier: "Login")
      let name = "Main"
      let source = StoryboardViewControllerResource<SourceViewController>(identifier: "Source")
      let summaryViewController = StoryboardViewControllerResource<SummaryViewController>(identifier: "SummaryViewController")
      let viewController = StoryboardViewControllerResource<ViewController>(identifier: "ViewController")
      
      func attention(_: Void = ()) -> AttentionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: attention)
      }
      
      func browseViewController(_: Void = ()) -> BrowseViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: browseViewController)
      }
      
      func consultationDetail(_: Void = ()) -> ConsultationDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: consultationDetail)
      }
      
      func initial(_: Void = ()) -> InitialNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      func login(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: login)
      }
      
      func source(_: Void = ()) -> SourceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: source)
      }
      
      func summaryViewController(_: Void = ()) -> SummaryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: summaryViewController)
      }
      
      func viewController(_: Void = ()) -> ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "InfoInquiry", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InfoInquiry' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LaunchImage2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LaunchImage2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clip", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clip' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "defaultImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'defaultImage' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'info' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholderImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholderImage' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "safari5", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'safari5' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().attention() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'attention' could not be loaded from storyboard 'Main' as 'AttentionViewController'.") }
        if _R.storyboard.main().browseViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'browseViewController' could not be loaded from storyboard 'Main' as 'BrowseViewController'.") }
        if _R.storyboard.main().consultationDetail() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'consultationDetail' could not be loaded from storyboard 'Main' as 'ConsultationDetailViewController'.") }
        if _R.storyboard.main().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'Main' as 'InitialNavigationController'.") }
        if _R.storyboard.main().login() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'login' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
        if _R.storyboard.main().source() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'source' could not be loaded from storyboard 'Main' as 'SourceViewController'.") }
        if _R.storyboard.main().summaryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'summaryViewController' could not be loaded from storyboard 'Main' as 'SummaryViewController'.") }
        if _R.storyboard.main().viewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewController' could not be loaded from storyboard 'Main' as 'ViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
