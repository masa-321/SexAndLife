//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 68 images.
  struct image {
    /// Image ` identification`.
    static let identification = Rswift.ImageResource(bundle: R.hostingBundle, name: " identification")
    /// Image `Heart2`.
    static let heart2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Heart2")
    /// Image `Heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "Heart")
    /// Image `InfoInquiry`.
    static let infoInquiry = Rswift.ImageResource(bundle: R.hostingBundle, name: "InfoInquiry")
    /// Image `LaunchImage2`.
    static let launchImage2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage2")
    /// Image `LaunchImageSet`.
    static let launchImageSet = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImageSet")
    /// Image `NextPage`.
    static let nextPage = Rswift.ImageResource(bundle: R.hostingBundle, name: "NextPage")
    /// Image `aboutSex`.
    static let aboutSex = Rswift.ImageResource(bundle: R.hostingBundle, name: "aboutSex")
    /// Image `addComment`.
    static let addComment = Rswift.ImageResource(bundle: R.hostingBundle, name: "addComment")
    /// Image `alphabet-D`.
    static let alphabetD = Rswift.ImageResource(bundle: R.hostingBundle, name: "alphabet-D")
    /// Image `body`.
    static let body = Rswift.ImageResource(bundle: R.hostingBundle, name: "body")
    /// Image `category-1`.
    static let category1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "category-1")
    /// Image `category-2`.
    static let category2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "category-2")
    /// Image `category-3`.
    static let category3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "category-3")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `clip2`.
    static let clip2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "clip2")
    /// Image `clip`.
    static let clip = Rswift.ImageResource(bundle: R.hostingBundle, name: "clip")
    /// Image `commentBlue`.
    static let commentBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "commentBlue")
    /// Image `commentCount2`.
    static let commentCount2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "commentCount2")
    /// Image `commentCount3`.
    static let commentCount3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "commentCount3")
    /// Image `commentCount`.
    static let commentCount = Rswift.ImageResource(bundle: R.hostingBundle, name: "commentCount")
    /// Image `commentGreen`.
    static let commentGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "commentGreen")
    /// Image `contraception`.
    static let contraception = Rswift.ImageResource(bundle: R.hostingBundle, name: "contraception")
    /// Image `defaultImage`.
    static let defaultImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "defaultImage")
    /// Image `document`.
    static let document = Rswift.ImageResource(bundle: R.hostingBundle, name: "document")
    /// Image `editing`.
    static let editing = Rswift.ImageResource(bundle: R.hostingBundle, name: "editing")
    /// Image `facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook")
    /// Image `flick`.
    static let flick = Rswift.ImageResource(bundle: R.hostingBundle, name: "flick")
    /// Image `garbage`.
    static let garbage = Rswift.ImageResource(bundle: R.hostingBundle, name: "garbage")
    /// Image `health`.
    static let health = Rswift.ImageResource(bundle: R.hostingBundle, name: "health")
    /// Image `help`.
    static let help = Rswift.ImageResource(bundle: R.hostingBundle, name: "help")
    /// Image `info`.
    static let info = Rswift.ImageResource(bundle: R.hostingBundle, name: "info")
    /// Image `inquiry2`.
    static let inquiry2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "inquiry2")
    /// Image `inquiry3`.
    static let inquiry3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "inquiry3")
    /// Image `inquiry4`.
    static let inquiry4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "inquiry4")
    /// Image `inquiry`.
    static let inquiry = Rswift.ImageResource(bundle: R.hostingBundle, name: "inquiry")
    /// Image `left`.
    static let left = Rswift.ImageResource(bundle: R.hostingBundle, name: "left")
    /// Image `lgbtq`.
    static let lgbtq = Rswift.ImageResource(bundle: R.hostingBundle, name: "lgbtq")
    /// Image `licence`.
    static let licence = Rswift.ImageResource(bundle: R.hostingBundle, name: "licence")
    /// Image `lifeplaning`.
    static let lifeplaning = Rswift.ImageResource(bundle: R.hostingBundle, name: "lifeplaning")
    /// Image `mail`.
    static let mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "mail")
    /// Image `medical`.
    static let medical = Rswift.ImageResource(bundle: R.hostingBundle, name: "medical")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `notification`.
    static let notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification")
    /// Image `partnership`.
    static let partnership = Rswift.ImageResource(bundle: R.hostingBundle, name: "partnership")
    /// Image `pen`.
    static let pen = Rswift.ImageResource(bundle: R.hostingBundle, name: "pen")
    /// Image `placeholderImage-1`.
    static let placeholderImage1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholderImage-1")
    /// Image `placeholderImage`.
    static let placeholderImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholderImage")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `profile2`.
    static let profile2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile2")
    /// Image `profile4`.
    static let profile4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile4")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `review`.
    static let review = Rswift.ImageResource(bundle: R.hostingBundle, name: "review")
    /// Image `right`.
    static let right = Rswift.ImageResource(bundle: R.hostingBundle, name: "right")
    /// Image `safari5`.
    static let safari5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "safari5")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `searchbar`.
    static let searchbar = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchbar")
    /// Image `socialLink`.
    static let socialLink = Rswift.ImageResource(bundle: R.hostingBundle, name: "socialLink")
    /// Image `sort`.
    static let sort = Rswift.ImageResource(bundle: R.hostingBundle, name: "sort")
    /// Image `sos-downsize`.
    static let sosDownsize = Rswift.ImageResource(bundle: R.hostingBundle, name: "sos-downsize")
    /// Image `star2`.
    static let star2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "star2")
    /// Image `star3`.
    static let star3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "star3")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `tutorialClip2`.
    static let tutorialClip2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorialClip2")
    /// Image `tutorialClip`.
    static let tutorialClip = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorialClip")
    /// Image `tutorialConsultation`.
    static let tutorialConsultation = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorialConsultation")
    /// Image `tutorialDefault`.
    static let tutorialDefault = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorialDefault")
    /// Image `tutorialSearch`.
    static let tutorialSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorialSearch")
    
    /// `UIImage(named: " identification", bundle: ..., traitCollection: ...)`
    static func identification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.identification, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Heart2", bundle: ..., traitCollection: ...)`
    static func heart2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "InfoInquiry", bundle: ..., traitCollection: ...)`
    static func infoInquiry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.infoInquiry, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LaunchImage2", bundle: ..., traitCollection: ...)`
    static func launchImage2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LaunchImageSet", bundle: ..., traitCollection: ...)`
    static func launchImageSet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImageSet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NextPage", bundle: ..., traitCollection: ...)`
    static func nextPage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nextPage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "aboutSex", bundle: ..., traitCollection: ...)`
    static func aboutSex(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutSex, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "addComment", bundle: ..., traitCollection: ...)`
    static func addComment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addComment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "alphabet-D", bundle: ..., traitCollection: ...)`
    static func alphabetD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alphabetD, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "body", bundle: ..., traitCollection: ...)`
    static func body(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.body, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "category-1", bundle: ..., traitCollection: ...)`
    static func category1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.category1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "category-2", bundle: ..., traitCollection: ...)`
    static func category2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.category2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "category-3", bundle: ..., traitCollection: ...)`
    static func category3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.category3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "clip", bundle: ..., traitCollection: ...)`
    static func clip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clip, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "clip2", bundle: ..., traitCollection: ...)`
    static func clip2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clip2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "commentBlue", bundle: ..., traitCollection: ...)`
    static func commentBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commentBlue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "commentCount", bundle: ..., traitCollection: ...)`
    static func commentCount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commentCount, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "commentCount2", bundle: ..., traitCollection: ...)`
    static func commentCount2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commentCount2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "commentCount3", bundle: ..., traitCollection: ...)`
    static func commentCount3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commentCount3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "commentGreen", bundle: ..., traitCollection: ...)`
    static func commentGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commentGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "contraception", bundle: ..., traitCollection: ...)`
    static func contraception(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contraception, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "defaultImage", bundle: ..., traitCollection: ...)`
    static func defaultImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defaultImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "document", bundle: ..., traitCollection: ...)`
    static func document(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.document, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "editing", bundle: ..., traitCollection: ...)`
    static func editing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editing, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "flick", bundle: ..., traitCollection: ...)`
    static func flick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flick, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "garbage", bundle: ..., traitCollection: ...)`
    static func garbage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garbage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "health", bundle: ..., traitCollection: ...)`
    static func health(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.health, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "help", bundle: ..., traitCollection: ...)`
    static func help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "info", bundle: ..., traitCollection: ...)`
    static func info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "inquiry", bundle: ..., traitCollection: ...)`
    static func inquiry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inquiry, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "inquiry2", bundle: ..., traitCollection: ...)`
    static func inquiry2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inquiry2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "inquiry3", bundle: ..., traitCollection: ...)`
    static func inquiry3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inquiry3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "inquiry4", bundle: ..., traitCollection: ...)`
    static func inquiry4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inquiry4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "left", bundle: ..., traitCollection: ...)`
    static func left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lgbtq", bundle: ..., traitCollection: ...)`
    static func lgbtq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lgbtq, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "licence", bundle: ..., traitCollection: ...)`
    static func licence(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.licence, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lifeplaning", bundle: ..., traitCollection: ...)`
    static func lifeplaning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lifeplaning, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mail", bundle: ..., traitCollection: ...)`
    static func mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mail, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "medical", bundle: ..., traitCollection: ...)`
    static func medical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.medical, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "notification", bundle: ..., traitCollection: ...)`
    static func notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "partnership", bundle: ..., traitCollection: ...)`
    static func partnership(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.partnership, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pen", bundle: ..., traitCollection: ...)`
    static func pen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholderImage", bundle: ..., traitCollection: ...)`
    static func placeholderImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholderImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholderImage-1", bundle: ..., traitCollection: ...)`
    static func placeholderImage1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholderImage1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile2", bundle: ..., traitCollection: ...)`
    static func profile2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile4", bundle: ..., traitCollection: ...)`
    static func profile4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "review", bundle: ..., traitCollection: ...)`
    static func review(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.review, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "right", bundle: ..., traitCollection: ...)`
    static func right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "safari5", bundle: ..., traitCollection: ...)`
    static func safari5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.safari5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "searchbar", bundle: ..., traitCollection: ...)`
    static func searchbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchbar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "socialLink", bundle: ..., traitCollection: ...)`
    static func socialLink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.socialLink, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sort", bundle: ..., traitCollection: ...)`
    static func sort(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sort, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sos-downsize", bundle: ..., traitCollection: ...)`
    static func sosDownsize(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sosDownsize, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star2", bundle: ..., traitCollection: ...)`
    static func star2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star3", bundle: ..., traitCollection: ...)`
    static func star3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tutorialClip", bundle: ..., traitCollection: ...)`
    static func tutorialClip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialClip, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tutorialClip2", bundle: ..., traitCollection: ...)`
    static func tutorialClip2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialClip2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tutorialConsultation", bundle: ..., traitCollection: ...)`
    static func tutorialConsultation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialConsultation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tutorialDefault", bundle: ..., traitCollection: ...)`
    static func tutorialDefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialDefault, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tutorialSearch", bundle: ..., traitCollection: ...)`
    static func tutorialSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorialSearch, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 12 nibs.
  struct nib {
    /// Nib `ChannelCell`.
    static let channelCell = _R.nib._ChannelCell()
    /// Nib `CommentEmptyCell`.
    static let commentEmptyCell = _R.nib._CommentEmptyCell()
    /// Nib `CommentTableViewCell`.
    static let commentTableViewCell = _R.nib._CommentTableViewCell()
    /// Nib `ConsultationDetailBodyCell`.
    static let consultationDetailBodyCell = _R.nib._ConsultationDetailBodyCell()
    /// Nib `ConsultationDetailFooterCell`.
    static let consultationDetailFooterCell = _R.nib._ConsultationDetailFooterCell()
    /// Nib `ConsultationDetailHeaderCell`.
    static let consultationDetailHeaderCell = _R.nib._ConsultationDetailHeaderCell()
    /// Nib `InfoCell`.
    static let infoCell = _R.nib._InfoCell()
    /// Nib `InitialTableViewCell`.
    static let initialTableViewCell = _R.nib._InitialTableViewCell()
    /// Nib `ListCell`.
    static let listCell = _R.nib._ListCell()
    /// Nib `ProfileCommentCell`.
    static let profileCommentCell = _R.nib._ProfileCommentCell()
    /// Nib `QuestionAnswerCell`.
    static let questionAnswerCell = _R.nib._QuestionAnswerCell()
    /// Nib `SummaryCell`.
    static let summaryCell = _R.nib._SummaryCell()
    
    /// `UINib(name: "ChannelCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.channelCell) instead")
    static func channelCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.channelCell)
    }
    
    /// `UINib(name: "CommentEmptyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commentEmptyCell) instead")
    static func commentEmptyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentEmptyCell)
    }
    
    /// `UINib(name: "CommentTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commentTableViewCell) instead")
    static func commentTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentTableViewCell)
    }
    
    /// `UINib(name: "ConsultationDetailBodyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.consultationDetailBodyCell) instead")
    static func consultationDetailBodyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.consultationDetailBodyCell)
    }
    
    /// `UINib(name: "ConsultationDetailFooterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.consultationDetailFooterCell) instead")
    static func consultationDetailFooterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.consultationDetailFooterCell)
    }
    
    /// `UINib(name: "ConsultationDetailHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.consultationDetailHeaderCell) instead")
    static func consultationDetailHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.consultationDetailHeaderCell)
    }
    
    /// `UINib(name: "InfoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.infoCell) instead")
    static func infoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.infoCell)
    }
    
    /// `UINib(name: "InitialTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.initialTableViewCell) instead")
    static func initialTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.initialTableViewCell)
    }
    
    /// `UINib(name: "ListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.listCell) instead")
    static func listCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.listCell)
    }
    
    /// `UINib(name: "ProfileCommentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileCommentCell) instead")
    static func profileCommentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileCommentCell)
    }
    
    /// `UINib(name: "QuestionAnswerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questionAnswerCell) instead")
    static func questionAnswerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionAnswerCell)
    }
    
    /// `UINib(name: "SummaryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.summaryCell) instead")
    static func summaryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.summaryCell)
    }
    
    static func channelCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChannelCell? {
      return R.nib.channelCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChannelCell
    }
    
    static func commentEmptyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentEmptyCell? {
      return R.nib.commentEmptyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentEmptyCell
    }
    
    static func commentTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentTableViewCell? {
      return R.nib.commentTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentTableViewCell
    }
    
    static func consultationDetailBodyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConsultationDetailBodyCell? {
      return R.nib.consultationDetailBodyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConsultationDetailBodyCell
    }
    
    static func consultationDetailFooterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConsultationDetailFooterCell? {
      return R.nib.consultationDetailFooterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConsultationDetailFooterCell
    }
    
    static func consultationDetailHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConsultationDetailHeaderCell? {
      return R.nib.consultationDetailHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConsultationDetailHeaderCell
    }
    
    static func infoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InfoCell? {
      return R.nib.infoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InfoCell
    }
    
    static func initialTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InitialTableViewCell? {
      return R.nib.initialTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InitialTableViewCell
    }
    
    static func listCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ListCell? {
      return R.nib.listCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListCell
    }
    
    static func profileCommentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileCommentCell? {
      return R.nib.profileCommentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileCommentCell
    }
    
    static func questionAnswerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionAnswerCell? {
      return R.nib.questionAnswerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionAnswerCell
    }
    
    static func summaryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SummaryCell? {
      return R.nib.summaryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SummaryCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 28 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AskCell`.
    static let askCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "AskCell")
    /// Reuse identifier `AskedCell`.
    static let askedCell: Rswift.ReuseIdentifier<QuestionCell> = Rswift.ReuseIdentifier(identifier: "AskedCell")
    /// Reuse identifier `CommentEmptyCell`.
    static let commentEmptyCell: Rswift.ReuseIdentifier<CommentEmptyCell> = Rswift.ReuseIdentifier(identifier: "CommentEmptyCell")
    /// Reuse identifier `CommentTableViewCell`.
    static let commentTableViewCell: Rswift.ReuseIdentifier<CommentTableViewCell> = Rswift.ReuseIdentifier(identifier: "CommentTableViewCell")
    /// Reuse identifier `ConsultationCollectionCell`.
    static let consultationCollectionCell: Rswift.ReuseIdentifier<ConsultationCollectionCell> = Rswift.ReuseIdentifier(identifier: "ConsultationCollectionCell")
    /// Reuse identifier `ConsultationDetailBodyCell`.
    static let consultationDetailBodyCell: Rswift.ReuseIdentifier<ConsultationDetailBodyCell> = Rswift.ReuseIdentifier(identifier: "ConsultationDetailBodyCell")
    /// Reuse identifier `ConsultationDetailFooterCell`.
    static let consultationDetailFooterCell: Rswift.ReuseIdentifier<ConsultationDetailFooterCell> = Rswift.ReuseIdentifier(identifier: "ConsultationDetailFooterCell")
    /// Reuse identifier `ConsultationDetailHeaderCell`.
    static let consultationDetailHeaderCell: Rswift.ReuseIdentifier<ConsultationDetailHeaderCell> = Rswift.ReuseIdentifier(identifier: "ConsultationDetailHeaderCell")
    /// Reuse identifier `ConsultationItemCell`.
    static let consultationItemCell: Rswift.ReuseIdentifier<ConsultationItemCell> = Rswift.ReuseIdentifier(identifier: "ConsultationItemCell")
    /// Reuse identifier `DescriptionCell`.
    static let descriptionCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "DescriptionCell")
    /// Reuse identifier `InfoCell`.
    static let infoCell: Rswift.ReuseIdentifier<InfoCell> = Rswift.ReuseIdentifier(identifier: "InfoCell")
    /// Reuse identifier `InitialTableViewCell`.
    static let initialTableViewCell: Rswift.ReuseIdentifier<InitialTableViewCell> = Rswift.ReuseIdentifier(identifier: "InitialTableViewCell")
    /// Reuse identifier `ListCell`.
    static let listCell: Rswift.ReuseIdentifier<ListCell> = Rswift.ReuseIdentifier(identifier: "ListCell")
    /// Reuse identifier `ProfileCommentCell`.
    static let profileCommentCell: Rswift.ReuseIdentifier<ProfileCommentCell> = Rswift.ReuseIdentifier(identifier: "ProfileCommentCell")
    /// Reuse identifier `ProfileInfoCell`.
    static let profileInfoCell: Rswift.ReuseIdentifier<ProfileInfoCell> = Rswift.ReuseIdentifier(identifier: "ProfileInfoCell")
    /// Reuse identifier `ProfileTextViewCell`.
    static let profileTextViewCell: Rswift.ReuseIdentifier<ProfileTextViewCell> = Rswift.ReuseIdentifier(identifier: "ProfileTextViewCell")
    /// Reuse identifier `SocialNetworkCell`.
    static let socialNetworkCell: Rswift.ReuseIdentifier<SocialNetworkCell> = Rswift.ReuseIdentifier(identifier: "SocialNetworkCell")
    /// Reuse identifier `SummaryCell`.
    static let summaryCell: Rswift.ReuseIdentifier<SummaryCell> = Rswift.ReuseIdentifier(identifier: "SummaryCell")
    /// Reuse identifier `ageCell`.
    static let ageCell: Rswift.ReuseIdentifier<AgeCell> = Rswift.ReuseIdentifier(identifier: "ageCell")
    /// Reuse identifier `employmentCell`.
    static let employmentCell: Rswift.ReuseIdentifier<EmploymentCell> = Rswift.ReuseIdentifier(identifier: "employmentCell")
    /// Reuse identifier `idCell`.
    static let idCell: Rswift.ReuseIdentifier<IdCell> = Rswift.ReuseIdentifier(identifier: "idCell")
    /// Reuse identifier `imageCell`.
    static let imageCell: Rswift.ReuseIdentifier<ImageCell> = Rswift.ReuseIdentifier(identifier: "imageCell")
    /// Reuse identifier `nameCell`.
    static let nameCell: Rswift.ReuseIdentifier<NameCell> = Rswift.ReuseIdentifier(identifier: "nameCell")
    /// Reuse identifier `occupationCell`.
    static let occupationCell: Rswift.ReuseIdentifier<OccupationCell> = Rswift.ReuseIdentifier(identifier: "occupationCell")
    /// Reuse identifier `profileTextCell`.
    static let profileTextCell: Rswift.ReuseIdentifier<ProfileTextCell> = Rswift.ReuseIdentifier(identifier: "profileTextCell")
    /// Reuse identifier `sexCell`.
    static let sexCell: Rswift.ReuseIdentifier<SexCell> = Rswift.ReuseIdentifier(identifier: "sexCell")
    /// Reuse identifier `sourceImageCell`.
    static let sourceImageCell: Rswift.ReuseIdentifier<SourceImageCell> = Rswift.ReuseIdentifier(identifier: "sourceImageCell")
    /// Reuse identifier `sourceInfoCell`.
    static let sourceInfoCell: Rswift.ReuseIdentifier<SourceInfoCell> = Rswift.ReuseIdentifier(identifier: "sourceInfoCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `ViewController`, and contains static references to 1 segues.
    struct viewController {
      /// Segue identifier `SummaryView`.
      static let summaryView: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ViewController, SummaryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "SummaryView")
      
      /// Optionally returns a typed version of segue `SummaryView`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func summaryView(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ViewController, SummaryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewController.summaryView, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `Consultation`.
    static let consultation = _R.storyboard.consultation()
    /// Storyboard `Info`.
    static let info = _R.storyboard.info()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Question`.
    static let question = _R.storyboard.question()
    /// Storyboard `Tutorial`.
    static let tutorial = _R.storyboard.tutorial()
    
    /// `UIStoryboard(name: "Consultation", bundle: ...)`
    static func consultation(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.consultation)
    }
    
    /// `UIStoryboard(name: "Info", bundle: ...)`
    static func info(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.info)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Question", bundle: ...)`
    static func question(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.question)
    }
    
    /// `UIStoryboard(name: "Tutorial", bundle: ...)`
    static func tutorial(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tutorial)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ChannelCell.validate()
      try _CommentEmptyCell.validate()
      try _CommentTableViewCell.validate()
      try _InfoCell.validate()
      try _ListCell.validate()
      try _ProfileCommentCell.validate()
      try _QuestionAnswerCell.validate()
      try _SummaryCell.validate()
    }
    
    struct _ChannelCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ChannelCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChannelCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChannelCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "aboutSex", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'aboutSex' is used in nib 'ChannelCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "body", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'body' is used in nib 'ChannelCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "contraception", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'contraception' is used in nib 'ChannelCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "health", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'health' is used in nib 'ChannelCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lgbtq", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lgbtq' is used in nib 'ChannelCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lifeplaning", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lifeplaning' is used in nib 'ChannelCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "partnership", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'partnership' is used in nib 'ChannelCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "warp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'warp' is used in nib 'ChannelCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CommentEmptyCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CommentEmptyCell
      
      let bundle = R.hostingBundle
      let identifier = "CommentEmptyCell"
      let name = "CommentEmptyCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentEmptyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentEmptyCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "commentBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentBlue' is used in nib 'CommentEmptyCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CommentTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CommentTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "CommentTableViewCell"
      let name = "CommentTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "editing", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'editing' is used in nib 'CommentTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "garbage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'garbage' is used in nib 'CommentTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile4' is used in nib 'CommentTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in nib 'CommentTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star2' is used in nib 'CommentTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star3' is used in nib 'CommentTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ConsultationDetailBodyCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ConsultationDetailBodyCell
      
      let bundle = R.hostingBundle
      let identifier = "ConsultationDetailBodyCell"
      let name = "ConsultationDetailBodyCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConsultationDetailBodyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConsultationDetailBodyCell
      }
      
      fileprivate init() {}
    }
    
    struct _ConsultationDetailFooterCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ConsultationDetailFooterCell
      
      let bundle = R.hostingBundle
      let identifier = "ConsultationDetailFooterCell"
      let name = "ConsultationDetailFooterCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConsultationDetailFooterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConsultationDetailFooterCell
      }
      
      fileprivate init() {}
    }
    
    struct _ConsultationDetailHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ConsultationDetailHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "ConsultationDetailHeaderCell"
      let name = "ConsultationDetailHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConsultationDetailHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConsultationDetailHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _InfoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = InfoCell
      
      let bundle = R.hostingBundle
      let identifier = "InfoCell"
      let name = "InfoCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InfoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InfoCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "NextPage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NextPage' is used in nib 'InfoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholderImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholderImage' is used in nib 'InfoCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _InitialTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = InitialTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "InitialTableViewCell"
      let name = "InitialTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InitialTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InitialTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ListCell
      
      let bundle = R.hostingBundle
      let identifier = "ListCell"
      let name = "ListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "category-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'category-1' is used in nib 'ListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clip2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clip2' is used in nib 'ListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "commentCount3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentCount3' is used in nib 'ListCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileCommentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProfileCommentCell
      
      let bundle = R.hostingBundle
      let identifier = "ProfileCommentCell"
      let name = "ProfileCommentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileCommentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileCommentCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "profile4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile4' is used in nib 'ProfileCommentCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _QuestionAnswerCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuestionAnswerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionAnswerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionAnswerCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "category-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'category-1' is used in nib 'QuestionAnswerCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clip2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clip2' is used in nib 'QuestionAnswerCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "commentCount3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentCount3' is used in nib 'QuestionAnswerCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholderImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholderImage' is used in nib 'QuestionAnswerCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SummaryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SummaryCell
      
      let bundle = R.hostingBundle
      let identifier = "SummaryCell"
      let name = "SummaryCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SummaryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SummaryCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "clip", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clip' is used in nib 'SummaryCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try consultation.validate()
      try info.validate()
      try launchScreen.validate()
      try main.validate()
      try question.validate()
      try tutorial.validate()
    }
    
    struct consultation: Rswift.StoryboardResourceType, Rswift.Validatable {
      let browseConsultationViewController = StoryboardViewControllerResource<BrowseConsultationViewController>(identifier: "BrowseConsultationViewController")
      let bundle = R.hostingBundle
      let consultationDetail = StoryboardViewControllerResource<ConsultationDetailViewController>(identifier: "ConsultationDetail")
      let consultationViewController = StoryboardViewControllerResource<ConsultationViewController>(identifier: "ConsultationViewController")
      let name = "Consultation"
      
      func browseConsultationViewController(_: Void = ()) -> BrowseConsultationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: browseConsultationViewController)
      }
      
      func consultationDetail(_: Void = ()) -> ConsultationDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: consultationDetail)
      }
      
      func consultationViewController(_: Void = ()) -> ConsultationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: consultationViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "defaultImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'defaultImage' is used in storyboard 'Consultation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "safari5", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'safari5' is used in storyboard 'Consultation', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.consultation().browseConsultationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'browseConsultationViewController' could not be loaded from storyboard 'Consultation' as 'BrowseConsultationViewController'.") }
        if _R.storyboard.consultation().consultationDetail() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'consultationDetail' could not be loaded from storyboard 'Consultation' as 'ConsultationDetailViewController'.") }
        if _R.storyboard.consultation().consultationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'consultationViewController' could not be loaded from storyboard 'Consultation' as 'ConsultationViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct info: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = InfoViewController
      
      let bundle = R.hostingBundle
      let infoViewController = StoryboardViewControllerResource<InfoViewController>(identifier: "InfoViewController")
      let licence = StoryboardViewControllerResource<LicenceViewController>(identifier: "Licence")
      let name = "Info"
      let privacyPolicy = StoryboardViewControllerResource<PrivacyPolicyViewController>(identifier: "PrivacyPolicy")
      let profile = StoryboardViewControllerResource<ProfileViewController>(identifier: "Profile")
      let profileEditViewController = StoryboardViewControllerResource<ProfileEditViewController>(identifier: "ProfileEditViewController")
      let socialNetwork = StoryboardViewControllerResource<SocialNetworkViewController>(identifier: "SocialNetwork")
      
      func infoViewController(_: Void = ()) -> InfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: infoViewController)
      }
      
      func licence(_: Void = ()) -> LicenceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: licence)
      }
      
      func privacyPolicy(_: Void = ()) -> PrivacyPolicyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: privacyPolicy)
      }
      
      func profile(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profile)
      }
      
      func profileEditViewController(_: Void = ()) -> ProfileEditViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileEditViewController)
      }
      
      func socialNetwork(_: Void = ()) -> SocialNetworkViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialNetwork)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: " identification", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named ' identification' is used in storyboard 'Info', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook' is used in storyboard 'Info', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile4' is used in storyboard 'Info', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in storyboard 'Info', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star2' is used in storyboard 'Info', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star3' is used in storyboard 'Info', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.info().infoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'infoViewController' could not be loaded from storyboard 'Info' as 'InfoViewController'.") }
        if _R.storyboard.info().licence() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'licence' could not be loaded from storyboard 'Info' as 'LicenceViewController'.") }
        if _R.storyboard.info().privacyPolicy() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'privacyPolicy' could not be loaded from storyboard 'Info' as 'PrivacyPolicyViewController'.") }
        if _R.storyboard.info().profile() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profile' could not be loaded from storyboard 'Info' as 'ProfileViewController'.") }
        if _R.storyboard.info().profileEditViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileEditViewController' could not be loaded from storyboard 'Info' as 'ProfileEditViewController'.") }
        if _R.storyboard.info().socialNetwork() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialNetwork' could not be loaded from storyboard 'Info' as 'SocialNetworkViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "LaunchImageSet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LaunchImageSet' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = InitialNavigationController
      
      let browseViewController = StoryboardViewControllerResource<BrowseViewController>(identifier: "BrowseViewController")
      let bundle = R.hostingBundle
      let comment = StoryboardViewControllerResource<CommentViewController>(identifier: "Comment")
      let initial = StoryboardViewControllerResource<InitialNavigationController>(identifier: "Initial")
      let name = "Main"
      let source = StoryboardViewControllerResource<SourceViewController>(identifier: "Source")
      let summaryViewController = StoryboardViewControllerResource<SummaryViewController>(identifier: "SummaryViewController")
      let viewController = StoryboardViewControllerResource<ViewController>(identifier: "ViewController")
      
      func browseViewController(_: Void = ()) -> BrowseViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: browseViewController)
      }
      
      func comment(_: Void = ()) -> CommentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: comment)
      }
      
      func initial(_: Void = ()) -> InitialNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: initial)
      }
      
      func source(_: Void = ()) -> SourceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: source)
      }
      
      func summaryViewController(_: Void = ()) -> SummaryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: summaryViewController)
      }
      
      func viewController(_: Void = ()) -> ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "addComment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addComment' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clip", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clip' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'info' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "inquiry4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'inquiry4' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'left' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile4' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "safari5", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'safari5' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sos-downsize", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sos-downsize' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().browseViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'browseViewController' could not be loaded from storyboard 'Main' as 'BrowseViewController'.") }
        if _R.storyboard.main().comment() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'comment' could not be loaded from storyboard 'Main' as 'CommentViewController'.") }
        if _R.storyboard.main().initial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'Main' as 'InitialNavigationController'.") }
        if _R.storyboard.main().source() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'source' could not be loaded from storyboard 'Main' as 'SourceViewController'.") }
        if _R.storyboard.main().summaryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'summaryViewController' could not be loaded from storyboard 'Main' as 'SummaryViewController'.") }
        if _R.storyboard.main().viewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewController' could not be loaded from storyboard 'Main' as 'ViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct question: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = QuestionViewController
      
      let bundle = R.hostingBundle
      let name = "Question"
      let questionForm = StoryboardViewControllerResource<QuestionFormViewController>(identifier: "QuestionForm")
      let questionViewController = StoryboardViewControllerResource<QuestionViewController>(identifier: "QuestionViewController")
      
      func questionForm(_: Void = ()) -> QuestionFormViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: questionForm)
      }
      
      func questionViewController(_: Void = ()) -> QuestionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: questionViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart' is used in storyboard 'Question', but couldn't be loaded.") }
        if UIKit.UIImage(named: "addComment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addComment' is used in storyboard 'Question', but couldn't be loaded.") }
        if UIKit.UIImage(named: "check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check' is used in storyboard 'Question', but couldn't be loaded.") }
        if UIKit.UIImage(named: "commentGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentGreen' is used in storyboard 'Question', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile4' is used in storyboard 'Question', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.question().questionForm() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'questionForm' could not be loaded from storyboard 'Question' as 'QuestionFormViewController'.") }
        if _R.storyboard.question().questionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'questionViewController' could not be loaded from storyboard 'Question' as 'QuestionViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct tutorial: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TutorialViewController1
      
      let bundle = R.hostingBundle
      let login = StoryboardViewControllerResource<LoginViewController>(identifier: "Login")
      let name = "Tutorial"
      let tutorial1 = StoryboardViewControllerResource<TutorialViewController1>(identifier: "Tutorial1")
      let tutorial2 = StoryboardViewControllerResource<TutorialViewController2>(identifier: "Tutorial2")
      let tutorial3 = StoryboardViewControllerResource<TutorialViewController3>(identifier: "Tutorial3")
      let tutorial4 = StoryboardViewControllerResource<TutorialViewController4>(identifier: "Tutorial4")
      let tutorial5 = StoryboardViewControllerResource<TutorialViewController5>(identifier: "Tutorial5")
      let tutorial6 = StoryboardViewControllerResource<TutorialViewController6>(identifier: "Tutorial6")
      
      func login(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: login)
      }
      
      func tutorial1(_: Void = ()) -> TutorialViewController1? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tutorial1)
      }
      
      func tutorial2(_: Void = ()) -> TutorialViewController2? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tutorial2)
      }
      
      func tutorial3(_: Void = ()) -> TutorialViewController3? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tutorial3)
      }
      
      func tutorial4(_: Void = ()) -> TutorialViewController4? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tutorial4)
      }
      
      func tutorial5(_: Void = ()) -> TutorialViewController5? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tutorial5)
      }
      
      func tutorial6(_: Void = ()) -> TutorialViewController6? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tutorial6)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "LaunchImage2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LaunchImage2' is used in storyboard 'Tutorial', but couldn't be loaded.") }
        if UIKit.UIImage(named: "flick", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'flick' is used in storyboard 'Tutorial', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorialClip", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tutorialClip' is used in storyboard 'Tutorial', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorialClip2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tutorialClip2' is used in storyboard 'Tutorial', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorialConsultation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tutorialConsultation' is used in storyboard 'Tutorial', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorialDefault", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tutorialDefault' is used in storyboard 'Tutorial', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.tutorial().login() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'login' could not be loaded from storyboard 'Tutorial' as 'LoginViewController'.") }
        if _R.storyboard.tutorial().tutorial1() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tutorial1' could not be loaded from storyboard 'Tutorial' as 'TutorialViewController1'.") }
        if _R.storyboard.tutorial().tutorial2() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tutorial2' could not be loaded from storyboard 'Tutorial' as 'TutorialViewController2'.") }
        if _R.storyboard.tutorial().tutorial3() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tutorial3' could not be loaded from storyboard 'Tutorial' as 'TutorialViewController3'.") }
        if _R.storyboard.tutorial().tutorial4() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tutorial4' could not be loaded from storyboard 'Tutorial' as 'TutorialViewController4'.") }
        if _R.storyboard.tutorial().tutorial5() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tutorial5' could not be loaded from storyboard 'Tutorial' as 'TutorialViewController5'.") }
        if _R.storyboard.tutorial().tutorial6() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tutorial6' could not be loaded from storyboard 'Tutorial' as 'TutorialViewController6'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
